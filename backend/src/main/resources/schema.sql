--
-- Table structure for table 'users'
-- Corresponds to the User.java entity
--

CREATE TABLE users (
    user_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- @Id, @GeneratedValue(strategy = GenerationType.IDENTITY)
    name VARCHAR(255) NOT NULL,                                 -- @Column(nullable = false)
    email VARCHAR(255) NOT NULL UNIQUE,                         -- @Email, @Column(nullable = false), UNIQUE added based on common practice for email
    password VARCHAR(255) NOT NULL                              -- @Column(nullable = false)
);

CREATE TABLE posts (
    post_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- @Id, @GeneratedValue(strategy = GenerationType.IDENTITY)
    title VARCHAR(255) NOT NULL,                                -- @Column(nullable = false)
    body TEXT NOT NULL,                                         -- @Column(columnDefinition = "TEXT", nullable = false)
    created_at TIMESTAMP NOT NULL,                              -- @CreatedDate, @Column(nullable = false, updatable = false)
    user_id BIGINT,                                             -- @ManyToOne Author (FK)
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);


CREATE TABLE post_tags (
    post_post_id BIGINT NOT NULL,                               -- Foreign key to the posts table
    tags VARCHAR(255),                                          -- The element/tag itself
    FOREIGN KEY (post_post_id) REFERENCES posts(post_id) ON DELETE CASCADE
);

CREATE TABLE comments (
    comment_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- @Id, @GeneratedValue(strategy = GenerationType.IDENTITY)
    body TEXT,                                                      -- @Column(columnDefinition = "TEXT")
    created_at TIMESTAMP NOT NULL,                                  -- @CreatedDate, @Column(nullable = false, updatable = false)
    post_id BIGINT,                                                 
    user_id BIGINT,                                                 
    FOREIGN KEY (post_id) REFERENCES posts(post_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);


INSERT INTO users (user_id, name, email, password) VALUES (1, 'Alice Johnson', 'alice.j@example.com', 'securepass123');
INSERT INTO users (user_id, name, email, password) VALUES (2, 'Bob Williams', 'bob.w@example.com', 'mypassword456');
INSERT INTO users (user_id, name, email, password) VALUES (3, 'Charlie Brown', 'charlie.b@example.com', 'testpassword789');
INSERT INTO posts (post_id, title, body, created_at, user_id) VALUES (101, 'Spring Boot Tips', 'Here are some quick tips for optimizing your Spring Boot application startup time.', NOW(), 1);
INSERT INTO posts (post_id, title, body, created_at, user_id) VALUES (102, 'The Future of Java', 'Discussing Project Loom and other exciting features coming to the Java ecosystem.', NOW(), 2);
INSERT INTO posts (post_id, title, body, created_at, user_id) VALUES (103, 'JPA Entity Mapping Basics', 'A guide to mapping basic fields, relationships, and auditing listeners.', NOW(), 1);

INSERT INTO post_tags (post_post_id, tags) VALUES (101, 'SpringBoot');
INSERT INTO post_tags (post_post_id, tags) VALUES (101, 'Optimization');

INSERT INTO post_tags (post_post_id, tags) VALUES (102, 'Java');
INSERT INTO post_tags (post_post_id, tags) VALUES (102, 'Loom');
INSERT INTO post_tags (post_post_id, tags) VALUES (102, 'Concurrency');

INSERT INTO post_tags (post_post_id, tags) VALUES (103, 'JPA');
INSERT INTO post_tags (post_post_id, tags) VALUES (103, 'Hibernate');
INSERT INTO post_tags (post_post_id, tags) VALUES (103, 'Database');

INSERT INTO comments (comment_id, body, created_at, post_id, user_id) VALUES (501, 'Great tips, especially the lazy loading one!', NOW(), 101, 2);
INSERT INTO comments (comment_id, body, created_at, post_id, user_id) VALUES (502, 'I agree, Spring Boot is fantastic for quick setup.', NOW(), 101, 3);

INSERT INTO comments (comment_id, body, created_at, post_id, user_id) VALUES (503, 'Loom looks incredibly promising. Cannot wait for it to be mainstream.', NOW(), 102, 1);

INSERT INTO comments (comment_id, body, created_at, post_id, user_id) VALUES (504, 'Very clear explanation of the @JoinColumn annotation.', NOW(), 103, 2);